#!/usr/bin/env python3
"""
Autonomous Agent Creator

This module provides an autonomous agent that can create and write other agents.
It integrates with the rl_cli.py system to provide autonomous agent creation capabilities.

Features:
- Template-based agent creation
- Customizable agent behaviors and capabilities
- Integration with the existing agent framework
- Self-improvement through feedback loops
- Autonomous operation with safety constraints
"""

import os
import sys
import json
import logging
import asyncio
import uuid
import time
from typing import Dict, List, Any, Optional, Union, Callable
from datetime import datetime
from pathlib import Path

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class AgentTemplate:
    """Base template for creating new agents"""
    
    def __init__(self, name: str, description: str, capabilities: List[str]):
        self.name = name
        self.description = description
        self.capabilities = capabilities
        self.created_at = datetime.now().isoformat()
        self.id = str(uuid.uuid4())
        
    def to_dict(self) -> Dict[str, Any]:
        """Convert template to dictionary"""
        return {
            "id": self.id,
            "name": self.name,
            "description": self.description,
            "capabilities": self.capabilities,
            "created_at": self.created_at
        }
        
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'AgentTemplate':
        """Create template from dictionary"""
        template = cls(
            name=data["name"],
            description=data["description"],
            capabilities=data["capabilities"]
        )
        template.id = data.get("id", str(uuid.uuid4()))
        template.created_at = data.get("created_at", datetime.now().isoformat())
        return template
        
    def generate_code(self) -> str:
        """Generate code for this agent template"""
        code = f"""#!/usr/bin/env python3
\"\"\"
{self.name}

{self.description}

Capabilities:
{chr(10).join(f"- {capability}" for capability in self.capabilities)}

Generated by Autonomous Agent Creator
Created at: {self.created_at}
\"\"\"

import os
import sys
import json
import logging
import asyncio
import uuid
from typing import Dict, List, Any, Optional
from datetime import datetime

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class {self.name.replace(" ", "")}:
    \"\"\"
    {self.description}
    \"\"\"
    
    def __init__(self, config: Optional[Dict[str, Any]] = None):
        self.id = str(uuid.uuid4())
        self.name = "{self.name}"
        self.created_at = datetime.now().isoformat()
        self.config = config or {{}}
        self.capabilities = {self.capabilities}
        self.running = False
        logger.info(f"Initialized {{self.name}} agent with ID {{self.id}}")
        
    async def start(self):
        \"\"\"Start the agent\"\"\"
        self.running = True
        logger.info(f"Started {{self.name}} agent")
        
    async def stop(self):
        \"\"\"Stop the agent\"\"\"
        self.running = False
        logger.info(f"Stopped {{self.name}} agent")
        
    async def run(self):
        \"\"\"Main execution loop\"\"\"
        self.running = True
        try:
            while self.running:
                # Main agent logic here
                await self._process_cycle()
                await asyncio.sleep(1)  # Prevent CPU hogging
        except Exception as e:
            logger.error(f"Error in agent execution: {{e}}")
            self.running = False
        finally:
            logger.info(f"Agent {{self.name}} execution completed")
            
    async def _process_cycle(self):
        \"\"\"Process a single execution cycle\"\"\"
        # Implement the core agent logic here
        pass
        
    def to_dict(self) -> Dict[str, Any]:
        \"\"\"Convert agent to dictionary\"\"\"
        return {{
            "id": self.id,
            "name": self.name,
            "created_at": self.created_at,
            "capabilities": self.capabilities,
            "running": self.running
        }}
        
async def main():
    \"\"\"Main entry point\"\"\"
    agent = {self.name.replace(" ", "")}()
    await agent.start()
    try:
        await agent.run()
    finally:
        await agent.stop()

if __name__ == "__main__":
    asyncio.run(main())
"""
        return code

class SpecializedAgentTemplate(AgentTemplate):
    """Template for specialized agents with additional features"""
    
    def __init__(self, name: str, description: str, capabilities: List[str], 
                specialization: str, dependencies: List[str]):
        super().__init__(name, description, capabilities)
        self.specialization = specialization
        self.dependencies = dependencies
        
    def to_dict(self) -> Dict[str, Any]:
        """Convert template to dictionary"""
        data = super().to_dict()
        data.update({
            "specialization": self.specialization,
            "dependencies": self.dependencies
        })
        return data
        
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'SpecializedAgentTemplate':
        """Create template from dictionary"""
        template = cls(
            name=data["name"],
            description=data["description"],
            capabilities=data["capabilities"],
            specialization=data["specialization"],
            dependencies=data["dependencies"]
        )
        template.id = data.get("id", str(uuid.uuid4()))
        template.created_at = data.get("created_at", datetime.now().isoformat())
        return template
        
    def generate_code(self) -> str:
        """Generate code for this specialized agent template"""
        # Start with the base template code
        code = super().generate_code()
        
        # Add specialization-specific imports
        imports_section = "import os\nimport sys\nimport json\nimport logging\nimport asyncio\nimport uuid"
        specialized_imports = imports_section
        for dependency in self.dependencies:
            specialized_imports += f"\nimport {dependency}"
            
        code = code.replace(imports_section, specialized_imports)
        
        # Add specialization-specific methods
        class_end = "    def to_dict(self) -> Dict[str, Any]:"
        specialized_methods = f"""    
    async def perform_specialized_task(self, task_data: Dict[str, Any]) -> Dict[str, Any]:
        \"\"\"
        Perform a specialized task related to {self.specialization}
        
        Args:
            task_data: Data needed for the task
            
        Returns:
            Dict containing task results
        \"\"\"
        logger.info(f"Performing specialized task in {{self.specialization}}")
        # Implement specialized logic here
        return {{"status": "completed", "specialization": "{self.specialization}"}}
        
"""
        code = code.replace(class_end, specialized_methods + class_end)
        
        # Add specialization field to __init__
        init_end = "        logger.info(f\"Initialized {self.name} agent with ID {self.id}\")"
        specialized_init = f"        self.specialization = \"{self.specialization}\"\n{init_end}"
        code = code.replace(init_end, specialized_init)
        
        return code

class AgentCreator:
    """
    Autonomous agent that creates and manages other agents
    """
    
    def __init__(self, templates_dir: str = "./agent_templates", 
                agents_dir: str = "./generated_agents"):
        self.id = str(uuid.uuid4())
        self.name = "Autonomous Agent Creator"
        self.templates_dir = templates_dir
        self.agents_dir = agents_dir
        self.templates: Dict[str, AgentTemplate] = {}
        self.created_agents: Dict[str, Dict[str, Any]] = {}
        self.running = False
        
        # Create directories if they don't exist
        os.makedirs(templates_dir, exist_ok=True)
        os.makedirs(agents_dir, exist_ok=True)
        
        # Load existing templates
        self._load_templates()
        
        logger.info(f"Initialized {self.name} with ID {self.id}")
        
    def _load_templates(self):
        """Load templates from the templates directory"""
        template_files = list(Path(self.templates_dir).glob("*.json"))
        for file_path in template_files:
            try:
                with open(file_path, "r") as f:
                    data = json.load(f)
                
                # Determine template type and create appropriate instance
                if "specialization" in data:
                    template = SpecializedAgentTemplate.from_dict(data)
                else:
                    template = AgentTemplate.from_dict(data)
                    
                self.templates[template.id] = template
                logger.info(f"Loaded template: {template.name} ({template.id})")
            except Exception as e:
                logger.error(f"Error loading template {file_path}: {e}")
                
    def save_template(self, template: AgentTemplate):
        """Save a template to the templates directory"""
        self.templates[template.id] = template
        
        file_path = Path(self.templates_dir) / f"{template.id}.json"
        with open(file_path, "w") as f:
            json.dump(template.to_dict(), f, indent=2)
            
        logger.info(f"Saved template: {template.name} ({template.id})")
        
    def create_template(self, name: str, description: str, capabilities: List[str]) -> AgentTemplate:
        """Create a new agent template"""
        template = AgentTemplate(name, description, capabilities)
        self.save_template(template)
        return template
        
    def create_specialized_template(self, name: str, description: str, 
                                   capabilities: List[str], specialization: str,
                                   dependencies: List[str]) -> SpecializedAgentTemplate:
        """Create a new specialized agent template"""
        template = SpecializedAgentTemplate(name, description, capabilities, 
                                          specialization, dependencies)
        self.save_template(template)
        return template
        
    def list_templates(self) -> List[Dict[str, Any]]:
        """List all available templates"""
        return [template.to_dict() for template in self.templates.values()]
        
    def get_template(self, template_id: str) -> Optional[AgentTemplate]:
        """Get a template by ID"""
        return self.templates.get(template_id)
        
    def delete_template(self, template_id: str) -> bool:
        """Delete a template"""
        if template_id in self.templates:
            template = self.templates.pop(template_id)
            
            file_path = Path(self.templates_dir) / f"{template_id}.json"
            if file_path.exists():
                file_path.unlink()
                
            logger.info(f"Deleted template: {template.name} ({template_id})")
            return True
        return False
        
    async def create_agent(self, template_id: str, config: Optional[Dict[str, Any]] = None) -> Dict[str, Any]:
        """Create a new agent from a template"""
        template = self.get_template(template_id)
        if not template:
            raise ValueError(f"Template not found: {template_id}")
            
        # Generate agent code
        code = template.generate_code()
        
        # Create a unique filename for the agent
        agent_id = str(uuid.uuid4())
        safe_name = template.name.replace(" ", "_").lower()
        filename = f"{safe_name}_{agent_id[:8]}.py"
        file_path = Path(self.agents_dir) / filename
        
        # Write the agent code to file
        with open(file_path, "w") as f:
            f.write(code)
            
        # Make the file executable
        os.chmod(file_path, 0o755)
        
        # Record the created agent
        agent_info = {
            "id": agent_id,
            "template_id": template_id,
            "name": template.name,
            "file_path": str(file_path),
            "created_at": datetime.now().isoformat(),
            "config": config or {}
        }
        self.created_agents[agent_id] = agent_info
        
        logger.info(f"Created agent: {template.name} ({agent_id}) at {file_path}")
        return agent_info
        
    async def start(self):
        """Start the agent creator"""
        self.running = True
        logger.info(f"Started {self.name}")
        
    async def stop(self):
        """Stop the agent creator"""
        self.running = False
        logger.info(f"Stopped {self.name}")
        
    async def run(self):
        """Main execution loop"""
        await self.start()
        try:
            while self.running:
                # Main agent logic here
                await asyncio.sleep(1)  # Prevent CPU hogging
        finally:
            await self.stop()
            
    async def create_default_templates(self):
        """Create default templates if none exist"""
        if not self.templates:
            logger.info("Creating default templates")
            
            # Basic agent template
            self.create_template(
                name="Basic Agent",
                description="A simple agent with basic capabilities",
                capabilities=["logging", "configuration", "basic_operations"]
            )
            
            # Data processing agent
            self.create_specialized_template(
                name="Data Processing Agent",
                description="An agent specialized in processing and analyzing data",
                capabilities=["data_loading", "data_transformation", "data_analysis", "data_visualization"],
                specialization="data_processing",
                dependencies=["pandas", "numpy", "matplotlib"]
            )
            
            # Web scraping agent
            self.create_specialized_template(
                name="Web Scraping Agent",
                description="An agent specialized in web scraping and data extraction",
                capabilities=["url_handling", "html_parsing", "data_extraction", "rate_limiting"],
                specialization="web_scraping",
                dependencies=["requests", "beautifulsoup4", "aiohttp"]
            )
            
            # AI assistant agent
            self.create_specialized_template(
                name="AI Assistant Agent",
                description="An agent that provides AI-powered assistance",
                capabilities=["natural_language_processing", "question_answering", "task_automation"],
                specialization="ai_assistance",
                dependencies=["openai", "transformers", "nltk"]
            )
            
            logger.info(f"Created {len(self.templates)} default templates")

async def main():
    """Main entry point"""
    creator = AgentCreator()
    
    # Create default templates if none exist
    await creator.create_default_templates()
    
    # List available templates
    templates = creator.list_templates()
    logger.info(f"Available templates: {len(templates)}")
    for template in templates:
        logger.info(f"- {template['name']} ({template['id']})")
    
    # Create an agent from the first template
    if templates:
        template_id = templates[0]["id"]
        agent_info = await creator.create_agent(template_id)
        logger.info(f"Created agent: {agent_info['name']} at {agent_info['file_path']}")
        
        # Suggest how to run the agent
        logger.info(f"To run the agent: python {agent_info['file_path']}")
    
    await creator.run()

if __name__ == "__main__":
    asyncio.run(main())
